#!/usr/bin/env python

'''
  tornettools
  Authored by Rob Jansen, 2019-2020
  See LICENSE for licensing information
'''

import sys
import os
import argparse
import logging

from datetime import datetime
from random import randint
from random import seed as stdseed
from numpy.random import seed as numpyseed
from multiprocessing import cpu_count
from platform import platform, uname

from tornettools.util import which, make_directories
from tornettools._version import __version__

HELP_MAIN = """
Use 'tornettools <subcommand> --help' for more info
"""
DESC_MAIN = """
tornettools is a utility to guide you through the Tor network
experimentation process using Shadow. tornettools must be run with a
subcommand to specify a mode of operation.

For more information, see https://github.com/shadow/tornettools.
"""

HELP_STAGE = """
Process Tor metrics data for staging network generation
"""
DESC_STAGE = """
Process Tor network consensuses, relay descriptors, and user files
from Tor metrics to stage TorNet network generation.

This command should be used before running generate. This command
produces staging files that will be required for the generate
command to succeed.
"""

HELP_GENERATE = """
Generate TorNet network configurations
"""
DESC_GENERATE = """
Loads the TorNet staging files produced with the stage command
and uses them to generate a valid TorNet network configuration.

This command should be used after running stage.
"""

HELP_SIMULATE = """
Run a TorNet simulation in Shadow
"""
DESC_SIMULATE = """
Runs a Tor simulation using Shadow and the TorNet network
configurations files generated with the generate command.

This command should be used after running generate.
"""

HELP_PARSE = """
Parse useful data from simulation log files
"""
DESC_PARSE = """
Parses log files created by simulations run with the simulate
command; extracts and stores various useful performance metrics.

This command should be used after running simulate.
"""

HELP_PLOT = """
Plot previously parsed data to visualize results
"""
DESC_PLOT = """
Visualizes various performance metrics that were extracted and
stored with the parse command by producing graphical plots.

This command should be used after running parse.
"""

HELP_ARCHIVE = """
Cleanup and compress Shadow simulation data
"""
DESC_ARCHIVE = """
Prepares a Shadow simulation directory for archival by compressing
simulation output log files and data directories.

This command can be used any time after running simulate, but
ideally after parsing and plotting is also completed.
"""

def __setup_logging_helper(logfilename=None):
    my_handlers = []

    stdout_handler = logging.StreamHandler(sys.stdout)
    my_handlers.append(stdout_handler)

    if logfilename != None:
        make_directories(logfilename)
        file_handler = logging.FileHandler(filename=logfilename)
        my_handlers.append(file_handler)

    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s %(created)f [tornettools] [%(levelname)s] %(message)s',
        datefmt='%Y-%m-%d %H:%M:%S',
        handlers=my_handlers,
    )

    msg = "Logging system initialized! Logging events to stdout"
    if logfilename != None:
        msg += " and to '{}'".format(logfilename)
    logging.info(msg)

def __setup_logging(args):
    if args.quiet <= 1:
        logfilename = None
        if args.quiet == 0 and hasattr(args, 'prefix'):
            # log to a file too
            prefixstr = str(args.prefix)
            funcstr = str(args.command) if args.command is not None else "none"
            datestr = datetime.now().strftime("%Y-%m-%d.%H.%M.%S")
            logfilename = "{}/tornettools.{}.{}.log".format(prefixstr, funcstr, datestr)
        __setup_logging_helper(logfilename)
    else:
        pass # no logging

def main():
    # argparse.RawDescriptionHelpFormatter, RawTextHelpFormatter, RawDescriptionHelpFormatter
    my_formatter_class = CustomHelpFormatter

    # construct the options
    main_parser = argparse.ArgumentParser(description=DESC_MAIN, formatter_class=my_formatter_class)

    main_parser.add_argument('-v', '--version',
        help="""Prints the version of the toolkit and exits.""",
        action="store_true", dest="do_version",
        default=False)

    main_parser.add_argument('-q', '--quiet',
        help="""Do not write log messages to file. Use twice to also not write to stdout.""",
        action="count", dest="quiet",
        default=0)

    main_parser.add_argument('-s', '--seed',
        help="""Initialize PRNGs with a seed to allow for deterministic behavior.""",
        action="store", type=int, dest="seed", metavar="N",
        default=None)

    sub_parser = main_parser.add_subparsers(help=HELP_MAIN, dest='command')

    #########
    # stage #
    #########
    stage_parser = sub_parser.add_parser('stage',
        description=DESC_STAGE,
        help=HELP_STAGE,
        formatter_class=my_formatter_class)
    stage_parser.set_defaults(func=stage, formatter_class=my_formatter_class)

    stage_parser.add_argument('consensus_path',
        help="Path to a directory containing multiple consensus files",
        type=__type_str_dir_path_in)

    stage_parser.add_argument("server_descriptor_path",
        help="Path to a directory containing multiple server descriptor files",
        type=__type_str_dir_path_in)

    stage_parser.add_argument("user_stats_path",
        help="Path to a Tor user stats file (https://metrics.torproject.org/userstats-relay-country.csv)",
        type=__type_str_file_path_in)

    stage_parser.add_argument("tmodel_git_path",
        help="Path to a local directory that contains a git clone of the repo: \
            'https://github.com/tmodel-ccs2018/tmodel-ccs2018.github.io.git'",
        type=__type_str_dir_path_in)

    stage_parser.add_argument('-o', '--onionperf_data_path',
        help="Path to a directory of onionperf performance data",
        type=__type_str_dir_path_in,
        action='store',
        dest='onionperf_data_path',
        metavar='PATH')

    stage_parser.add_argument('-b', '--bandwidth_data_path',
        help="Path to a Tor metrics bandwidth.csv data file",
        type=__type_str_file_path_in,
        action='store',
        dest='bandwidth_data_path',
        metavar='PATH')

    stage_parser.add_argument('-g', '--geoip_path',
        help="""A file PATH to an existing geoip file (usually in tor/src/config/geoip)""",
        metavar="PATH", type=__type_str_file_path_in,
        action="store", dest="geoip_path",
        default=None)

    stage_parser.add_argument('--prefix',
        help="""A directory PATH prefix where the processed data
            files generated by this script will be written""",
        metavar="PATH", type=__type_str_dir_path_out,
        action="store", dest="prefix",
        default=os.getcwd())

    stage_parser.add_argument('-m', '--multiproc',
        help="""Enable multiprocessing with N worker processes, which may be '0'
            to use the number of available processor cores (use '1' to disable)""",
        metavar="N", type=__type_nonnegative_integer,
        action="store", dest="nprocesses",
        default=0)

    stage_parser.add_argument('-c', '--compress',
        help="""Compress output with xz.""",
        action="store_true", dest="do_compress",
        default=False)

    ############
    # generate #
    ############
    generate_parser = sub_parser.add_parser('generate',
        description=DESC_GENERATE,
        help=HELP_GENERATE,
        formatter_class=my_formatter_class)
    generate_parser.set_defaults(func=generate, formatter_class=my_formatter_class)

    generate_parser.add_argument('relay_info_path',
        help="Path to a relay-info-staging.json file produced with the 'stage' command",
        type=__type_str_file_path_in)

    generate_parser.add_argument("user_info_path",
        help="Path to a user-info-staging.json file produced with the 'stage' command",
        type=__type_str_file_path_in)

    generate_parser.add_argument("network_info_path",
        help="Path to a network-info-staging.json file produced with the 'stage' command",
        type=__type_str_file_path_in)

    generate_parser.add_argument("tmodel_git_path",
        help="Path to a local directory that contains a git clone of the repo: \
            'https://github.com/tmodel-ccs2018/tmodel-ccs2018.github.io.git'",
        type=__type_str_dir_path_in)

    generate_parser.add_argument('--prefix',
        help="""A directory PATH prefix where the tornet network configuration
            files generated by this script will be written""",
        metavar="PATH", type=__type_str_dir_path_out,
        action="store", dest="prefix",
        default=f"{os.getcwd()}/tornet")

    generate_parser.add_argument('-m', '--multiproc',
        help="""Enable multiprocessing with N worker processes, which may be '0'
            to use the number of available processor cores (use '1' to disable)""",
        metavar="N", type=__type_nonnegative_integer,
        action="store", dest="nprocesses",
        default=0)

    generate_parser.add_argument('-n', '--network_scale',
        help="""A fractional number representing the scale of the Shadow Tor network that we
            generate relative to a full Tor network. E.g., a value of 0.1 will generate a private
            Tor network with about 1/10 of the relays and 1/10 of the traffic load of public
            Tor.""",
        metavar="N", type=__type_fractional_float,
        action="store", dest="network_scale",
        default=0.1)

    generate_parser.add_argument('-p', '--process_scale',
        help="""A fractional number representing the ratio of the number of TGen and Tor client
            processes to the number of Tor users that we emulate. E.g., a value of 0.01 means each
            TGen client process will generate the background traffic of 1/0.01=100 Tor users. This
            setting helps us run larger scale Shadow experiments because it requires Shadow to run
            fewer Tor processes during the simulation.""",
        metavar="N", type=__type_fractional_float,
        action="store", dest="process_scale",
        default=0.01)

    generate_parser.add_argument('-s', '--server_scale',
        help="""A fractional number representing the ratio of the number of TGen servers to the
            number of TGen clients that we run. E.g., a value of 0.1 means that we will run 1
            TGen server for every 1/0.1=10 TGen clients.""",
        metavar="N", type=__type_fractional_float,
        action="store", dest="server_scale",
        default=0.1)

    generate_parser.add_argument('-t', '--torperf_scale',
        help="""A fractional number representing the ratio of the number of Perf clients to the
            number of Tor clients that we emulate. E.g., a value of 0.001 means that we will run
            1 Perf client for every 1/0.001=1000 Tor clients. Perf clients help us benchmark Tor
            performance during an experiment and validate against Tor metrics.""",
        metavar="N", type=__type_fractional_float,
        action="store", dest="torperf_scale",
        default=0.001)

    generate_parser.add_argument('-l', '--load_scale',
        help="""A float number by which we scale the number of circuit flows created by each TGen
        client relative to the 'normal' number of flows a client should create. E.g., a value of 2.0
        means that each client will generate twice as many circuit flows than it normally should,
        while a value of 0.5 means it will generate half as many. This setting allows us to increase
        or decrease the client traffic load to adjust the overall bandwidth utilization rates of
        relays in the generated network.""",
        metavar="N", type=float,
        action="store", dest="load_scale",
        default=1.0)

    generate_parser.add_argument('--onion_service_user_scale',
        help="""A float number by which we scale (multiply) the number of
        onion-service users and servers. Does *not* change traffic generated
        *per* user. i.e. *does* scale *total* onion service traffic in the
        network.""",
        metavar="N", type=__type_nonnegative_float,
        action="store", dest="onion_service_user_scale",
        default=0.0)

    generate_parser.add_argument('--exit_user_scale',
        help="""A float number by which we scale (multiply) the number of exit
        (non-onion-service) users and servers.  Does not change traffic
        generated *per* user. i.e. *does* scale *total* exit traffic in the
        network.""",
        metavar="N", type=__type_fractional_float,
        action="store", dest="exit_user_scale",
        default=1.0)

    generate_parser.add_argument('-a', '--atlas',
        help="""The path to a decompressed version of the atlas topology file that Shadow should
            use to construct its network. Use this option to avoid storing duplicate atlas files;
            if this option is unspecified, then we will copy the atlas from the tmodel_git_path repo
            into the config directory that we generate.
            (A compressed version of the file is normally available at
            'tmodel_git_path/data/shadow/network/atlas_v201801.shadow_v2.gml.xz'.)""",
        metavar="PATH", type=__type_str_file_path_in,
        action="store", dest="atlas_path",
        default=None)

    generate_parser.add_argument('-e', '--events',
        help="""Run oniontrace on each Tor node to log the given Tor control events (should be
            specified as a CSV string) throughout the simulation. Set to 'None' to disable.""",
        metavar="CSV", type=str,
        action="store", dest="events_csv",
        default="BW,CIRC")

    generate_parser.add_argument('-r', '--record',
        help="""Run oniontrace on each Tor node to record circuit building and stream assignment
            info throughout the simulation.""",
        action="store_true", dest="do_trace",
        default=False)

    generate_parser.add_argument('--tor',
        help="""Path to a compiled 'tor' executable, used to generate relay fingerprints.""",
        metavar="PATH", type=__type_str_file_path_in,
        action="store", dest="torexe",
        default=which("tor"))

    generate_parser.add_argument('--torgencert',
        help="""Path to a compiled 'tor-gencert' executable, used to generate relay keys.""",
        metavar="PATH", type=__type_str_file_path_in,
        action="store", dest="torgencertexe",
        default=which("tor-gencert"))

    generate_parser.add_argument('-g', '--geoip_path',
        help="""A file PATH to an existing geoip file (usually in TOR_SRCDIR/tor/src/config/geoip
            or TOR_INSTALLDIR/share/tor/geoip.) Unneeded for most sims, and uses around 9 MB of RAM
            per tor process.""",
        metavar="PATH", type=__type_str_file_path_in,
        action="store", dest="geoip_path",
        default=None)

    ############
    # simulate #
    ############
    simulate_parser = sub_parser.add_parser('simulate',
        description=DESC_SIMULATE,
        help=HELP_SIMULATE,
        formatter_class=my_formatter_class)
    simulate_parser.set_defaults(func=simulate, formatter_class=my_formatter_class)

    simulate_parser.add_argument('tornet_config_path',
        help="Path to a tornet configuration directory produced with the 'generate' command",
        type=__type_str_dir_path_in)

    simulate_parser.add_argument('-s', '--shadow',
        help="""Path to a compiled 'shadow' executable to use when running the simulation.""",
        metavar="PATH", type=__type_str_file_path_in,
        action="store", dest="shadow_exe",
        default=which("shadow"))

    # We set parallelism to cpu_count / 2 since we observed that this can run up to 3 times
    # faster on machines with Intel hyperthreading enabled.
    # Non-hyperthreaded CPUs may perform better with cpu_count instead.
    simulate_parser.add_argument('-a', '--args',
        help="""The Shadow options to use when running the simulation.""",
        type=str,
        action="store", dest="shadow_args",
        # The template directory is also set to the same value in the configuration file.
        # It is set here as well so that old shadow simulations that don't have it set in
        # the configuration file will still run correctly. This option can be removed from
        # these default shadow options in the future.
        default="--parallelism={} --seed=666 --template-directory=shadow.data.template".format(cpu_count()//2))

    # This option allows us to swap the filename with shadow.config.xml in Shadow v1.15.x.
    # Once we no longer care about supporting Shadow v1.15.x, we could remove this option.
    simulate_parser.add_argument('-f', '--filename',
        help="""The Shadow config filename to use when running the simulation.""",
        type=str,
        action="store", dest="shadow_config",
        default="shadow.config.yaml")

    simulate_parser.add_argument('-c', '--compress',
        help="""Compress log output from Shadow using lzma.""",
        action="store_true", dest="do_compress",
        default=False)

    simulate_parser.add_argument('--use-realtime',
        help="""Use realtime scheduling by running shadow under chrt.""",
        action="store_true", dest="use_realtime",
        default=False)

    #########
    # parse #
    #########
    parse_parser = sub_parser.add_parser('parse',
        description=DESC_PARSE,
        help=HELP_PARSE,
        formatter_class=my_formatter_class)
    parse_parser.set_defaults(func=parse, formatter_class=my_formatter_class)

    parse_parser.add_argument('tornet_config_path',
        help="Path to a tornet configuration directory after running the 'simulate' command",
        type=__type_str_dir_path_in)

    parse_parser.add_argument('-m', '--multiproc',
        help="""Enable multiprocessing with N worker processes, which may be '0'
            to use the number of available processor cores (use '1' to disable)""",
        metavar="N", type=__type_nonnegative_integer,
        action="store", dest="nprocesses",
        default=0)

    parse_parser.add_argument('-s', '--skip-raw',
        help="""Skip trying to parse raw logs from
            <tornet_config_path>/shadow.data/hosts into
            <tornet_config_path>/*.json.xz, continuing on to parse
            <tornet_config_path>/*.json.xz into
            <tornet_config_path>/tornet.plot.data/*.json. This is useful if you
            no longer have those raw logs, but want to re-parse and/or re-plot
            with updated post-processing. """,
            action="store_true", dest="skip_raw", default=False)

    parse_parser.add_argument('-c', '--converge-time',
        help="""The number of seconds after the beginning of the simulation that we
            should ignore in the tgen and oniontrace log files, i.e., so we don't
            track network performance before the network has reached steady-state.
            Log messages during the interval [0, converge_time) will be ignored.""",
        metavar="N", type=__type_nonnegative_integer,
        action="store", dest="converge_time",
        default=1200)

    parse_parser.add_argument('-r', '--run-time',
        help="""The number of seconds after the converge-time is reached that we should
            consider the tgen and oniontrace log files valid for the purpose of
            extracting performance stats. Log messages during the interval
            [converge_time, converge_time + run_time) will be parsed. A negative value
            indicates that we should parse all available data, i.e, during the
            interval [converge_time, ∞).""",
        metavar="N", type=int,
        action="store", dest="run_time",
        default=-1)

    ########
    # plot #
    ########
    plot_parser = sub_parser.add_parser('plot',
        description=DESC_PLOT,
        help=HELP_PLOT,
        formatter_class=my_formatter_class)
    plot_parser.set_defaults(func=plot, formatter_class=my_formatter_class)

    plot_parser.add_argument('tornet_collection_path',
        help="""Path to a directory containing one or more subdirectories of parsed
            tornet results from the 'parse' command. Confidence intervals are drawn
            when this path contains plot data from multiple simulations.""",
        action='store',
        type=__type_str_dir_path_in,
        nargs='+')

    plot_parser.add_argument('-t', '--tor_metrics_path',
        help="""Path to a tor_metrics.json file that was created by the 'stage' command,
            which we be compared against the tornet collections. The label and color
            to use in the graphs that we create are optional.""",
        action=PathStringArgsAction,
        nargs='+',
        metavar="PATH [LABEL [COLOR]]")

    plot_parser.add_argument('--prefix',
        help="""A directory PATH prefix where the graphs generated by this script
            will be written.""",
        action="store",
        type=__type_str_dir_path_out,
        dest="prefix",
        default=os.getcwd(),
        metavar="PATH")

    plot_parser.add_argument('-l', '--labels',
        help="""Labels for the tornet collections to be used in the graph legends.""",
        action='store',
        type=str,
        dest="labels",
        nargs='+',
        metavar='LABEL')

    plot_parser.add_argument('-c', '--colors',
        help="""Colors for the tornet collections to be used in the graph plots.""",
        action='store',
        type=str,
        dest="colors",
        nargs='+',
        metavar='COLOR')

    plot_parser.add_argument('-a', '--all',
        help="""Also generate individual tgentools and oniontracetools plots for each simulation.""",
        action="store_true",
        dest="plot_all",
        default=False)

    plot_parser.add_argument('--pngs',
        help="""Save individual plot images in png instead of pdf format.""",
        action="store_true",
        dest="plot_pngs",
        default=False)

    ###########
    # archive #
    ###########
    archive_parser = sub_parser.add_parser('archive',
        description=DESC_ARCHIVE,
        help=HELP_ARCHIVE,
        formatter_class=my_formatter_class)
    archive_parser.set_defaults(func=archive, formatter_class=my_formatter_class)

    archive_parser.add_argument('tornet_config_path',
        help="Path to a tornet configuration directory after running the 'plot' command",
        type=__type_str_dir_path_in)

    archive_parser.add_argument('-m', '--multiproc',
        help="""Enable multiprocessing with N worker processes, which may be '0'
            to use the number of available processor cores (use '1' to disable)""",
        metavar="N", type=__type_nonnegative_integer,
        action="store", dest="nprocesses",
        default=0)

    # get args and call the command handler for the chosen mode
    args = main_parser.parse_args()

    if not hasattr(args, "prefix") and hasattr(args, "tornet_config_path"):
        args.prefix = args.tornet_config_path
    if hasattr(args, "nprocesses"):
        args.nprocesses = args.nprocesses if args.nprocesses > 0 else cpu_count()

    # check if it's just a version check and we should short circuit
    if args.do_version:
        __setup_logging(args)
        logging.info("tornettools version {}".format(__version__))
        return

    # if it's anything other than version, we need a subcommand
    if args.command == None:
        main_parser.print_usage()
        return

    # now we know we can start
    __setup_logging(args)

    # seed the pseudo-random generators
    # if we don't have a seed, choose one and make sure we log it for reproducibility
    if args.seed == None:
        args.seed = randint(0, 2**31)
    stdseed(args.seed)
    numpyseed(args.seed)
    logging.info("Seeded standard and numpy PRNGs with seed={}".format(args.seed))

    logging.info("The argument namespace is: {}".format(str(args)))
    logging.info("The platform is: {}".format(str(platform())))
    logging.info("System info: {}".format(str(uname())))

    # now run the configured mode
    rv = args.func(args)

    if rv == 0 or rv == None:
        return 0
    elif isinstance(rv, int):
        return rv
    else:
        logging.warning(f"Unknown return value: {rv}")
        return 1

def stage(args):
    from tornettools import stage
    rv = stage.run(args)
    if rv != 0 and rv != None:
        return rv

    from tornettools import parse_onionperf
    return parse_onionperf.run(args)

def generate(args):
    if args.events_csv.lower() == "none":
        args.events_csv = None
    from tornettools import generate
    return generate.run(args)

def simulate(args):
    from tornettools import simulate
    return simulate.run(args)

def parse(args):
    from tornettools import parse
    return parse.run(args)

def plot(args):
    from tornettools import plot
    return plot.run(args)

def archive(args):
    from tornettools import archive
    return archive.run(args)

def __type_nonnegative_integer(value):
    i = int(value)
    if i < 0:
        raise argparse.ArgumentTypeError("'%s' is an invalid non-negative int value" % value)
    return i

def __type_nonnegative_float(value):
    i = float(value)
    if i < 0.0:
        raise argparse.ArgumentTypeError("'%s' is an invalid non-negative flat value" % value)
    return i

def __type_fractional_float(value):
    i = float(value)
    if i <= 0.0 or i > 1.0:
        raise argparse.ArgumentTypeError("'%s' is an invalid fractional float value" % value)
    return i

def __type_str_file_path_out(value):
    s = str(value)
    if s == "-":
        return s
    p = os.path.abspath(os.path.expanduser(s))
    make_directories(p)
    return p

def __type_str_dir_path_out(value):
    s = str(value)
    p = os.path.abspath(os.path.expanduser(s))
    make_directories(p)
    return p

def __type_str_file_path_in(value):
    s = str(value)
    if s == "-":
        return s
    p = os.path.abspath(os.path.expanduser(s))
    if not os.path.exists(p):
        raise argparse.ArgumentTypeError(f"Path does not exist: {p}")
    elif not os.path.isfile(p):
        raise argparse.ArgumentTypeError(f"Path is not a file: {p}")
    return p

def __type_str_dir_path_in(value):
    s = str(value)
    p = os.path.abspath(os.path.expanduser(s))
    if not os.path.exists(p):
        raise argparse.ArgumentTypeError(f"Path does not exist: {p}")
    elif not os.path.isdir(p):
        raise argparse.ArgumentTypeError(f"Path is not a directory: {p}")
    return p

def type_str_file_path_in(p):
    return __type_str_file_path_in(p)

# adds the 'RawDescriptionHelpFormatter' to the ArgsDefault one
class CustomHelpFormatter(argparse.ArgumentDefaultsHelpFormatter):
    def _fill_text(self, text, width, indent):
        return ''.join([indent + line for line in text.splitlines(True)])

# a custom action for passing in experimental data directories when plotting
class PathStringArgsAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if len(values) == 0:
            raise argparse.ArgumentError(self, "A path is required.")
        elif len(values) > 3:
            raise argparse.ArgumentError(self, "Must specify 3 or fewer strings.")

        # get the values
        path = values[0]
        label = values[1] if len(values) > 1 else None
        color = values[2] if len(values) > 2 else None

        # extract and validate the path
        path = type_str_file_path_in(path)

        # remove the default
        if "_didremovedefault" not in namespace:
            setattr(namespace, self.dest, [])
            setattr(namespace, "_didremovedefault", True)

        # append our new arg set
        dest = getattr(namespace, self.dest)
        dest.append([path, label, color])

if __name__ == '__main__':
    sys.exit(main())
